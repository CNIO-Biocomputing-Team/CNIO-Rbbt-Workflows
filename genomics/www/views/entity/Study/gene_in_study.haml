- action_card = ActionCard.new 

- action_card.require :gene do
  = action_parameters do
    - input :gene, :string, "Ensembl Gene ID"

- action_card.require :gene
= action_card_render action_card do
  - organism = entity.organism
  - genes = Gene.setup(Translation.job(:translate, gene, :genes => [gene], :organism =>organism).run, "Ensembl Gene ID", organism)
  - gene = genes.first

  %h4 Genotype analysis
  - overview = entity.job(:genotype_overview).run(true).path.tsv(:grep => [gene])[gene]
  - if overview.nil?
    No mutations in this cohort
  - else
    %dl
      %dt Mutations
      %dd= entity.mutations_over_gene(gene).list_link :length, "Mutations over #{ gene.name } in #{ entity }"

      %dt Samples with gene mutated
      - if overview[0].any?
        %dd= Sample.setup(overview[0], entity).list_link :length, "Samples with mutations over #{gene.name} in #{ entity }"
      - else
        %dd None

      %dt Samples with gene affected
      - if overview[1].any?
        %dd= Sample.setup(overview[1], entity).list_link :length, "Samples with relevant mutations over #{gene.name} in #{ entity }"
      - else
        %dd None

      %dt Samples with gene damaged
      - if overview[2].any?
        %dd= Sample.setup(overview[2], entity).list_link :length, "Samples with damaging mutations over #{gene.name} in #{ entity }"
      - else
        %dd None

      %dt Significance
      - pvalue = overview[3].first
      %dd= Float === pvalue ? "%.5g" % pvalue : pvalue

  %h4 CNV analysis
  - overview = entity.job(:cnv_overview).run(true).path.tsv(:grep => [gene])[gene]
  - if overview.nil?
    No CNVs in this cohort
  - else
    %dl

      %dt Samples with gene lost
      - if overview[0].any?
        %dd= Sample.setup(overview[0], entity).list_link :length, "Samples with #{gene.name} lost in #{ entity }"
      - else
        %dd None

      %dt Samples with gene gained
      - if overview[1].any?
        %dd= Sample.setup(overview[1], entity).list_link :length, "Samples with #{gene.name} gained in #{ entity }"
      - else
        %dd None

  %h4 Gene expression 
  - if not entity.matrices.include? "gene_expression"
    No gene expression in this cohort
  - else
    - matrix = entity.matrix(:gene_expression)
    - values = (matrix.matrix_file.tsv(:grep => gene)[gene] || []).flatten.compact.collect{|v| v.to_f}
    - if values.any?
      - title = "Distribution of #{ gene.name || gene } expression values in #{entity}"
      = resource title + '.png', nil, :image do |filename|
        :ruby
          R.run <<-EOF
            values = #{R.ruby2R values}
            rbbt.png_plot(file='#{filename}', 300, 300, 'plot(density(values), main="#{gene.name} in #{ entity }"); rug(values); abline(v=mean(values)); abline(v=(mean(values) + sd(values))); abline(v=(mean(values) + 2 * sd(values)))')
          EOF
    
 
-#- action_card = ActionCard.new 
-#
-#- action_card.require :gene do
-#  = action_parameters do
-#    - input :gene, :string, "Ensembl Gene ID"
-#
-#- action_card.require :gene
-#= action_card_render action_card do
-#  .mutations
-#    - organism = entity.metadata[:organism]
-#    - genes = Gene.setup(Translation.job(:translate, gene, :genes => [gene], :organism =>organism).run, "Ensembl Gene ID", organism)
-#    - gene = genes.first
-#
-#    - mutations = entity.mutations_over_gene(gene).select_by(:relevant?)
-#
-#    - if mutations and mutations.any?
-#      %h4 Relevant mutations
-#      - GenomicMutation.setup(mutations, "Relevant mutations over #{gene.name} in #{ entity }", organism, true)
-#      = mutations.list_link :length, "Mutations over #{ gene.name || gene } in #{ entity }"
-#    - else
-#      %p No mutations on this gene
-#
-#    - samples = entity.samples_with_gene_affected[gene]
-#    - if samples and samples.any?
-#      %h4 Samples with relevant mutations
-#      - samples = Sample.setup(samples.uniq, entity)
-#      = samples.list_link :length, "Samples with relevant mutations over #{ gene.name || gene } in #{ entity }"
-#    - else
-#      %p No samples affected by relevant mutations in this gene
-#
-#  -#  
-#    - samples = entity.samples_with_gene_damaged[gene]
-#    - if samples and samples.any?
-#      %h4 Samples with damaging mutations
-#      - samples = Sample.setup(samples.uniq, entity)
-#      = samples.list_link :length, "Samples with damaging mutations over #{ gene.name || gene } in #{ entity }"
-#    - else
-#      %p No samples affected by mutations in this gene
    

