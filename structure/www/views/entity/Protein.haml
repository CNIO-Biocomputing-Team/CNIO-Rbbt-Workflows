- entity_card = EntityCard.new(entity)
- entity_card.name = entity
- entity_card.long_name = "#{entity.gene.name} Protein Isoform"
- entity_card.meta do
  %dl
    %dt Gene
    %dd= entity.gene.ensembl.link

    %dt Uniprot
    %dd
      %a(href="http://www.uniprot.org/uniprot/#{entity.uniprot}")= entity.uniprot

- entity_card.description do
  = link_css '/stylesheets/protein'

  %dl.tabs
    %dt Controls
    %dd.row
      .controls.column.small-12
        %ul.controls
          %li
            %a.clear(href="#") clear
            %a.aligned(href="#") mark alignment

        = action_parameters nil, {:klass => ''}, :action => '#' do
          - input :list, :select, "Genomic Mutation list", nil, :html_options => {:class => 'favourite_lists', :type => 'GenomicMutation'}
          - input :color, :select, "Color to use", 'green', :select_options => %w(red green blue)

    %dt SVG
    %dd.row
      .svg.column.small-12
        = tool :isoform_svg, :protein => entity, :sequence => entity.sequence, :height => 200

    %dt JMOL
    %dd.row
      .jmol.column.small-12
        = tool :jmol, :protein => entity

    %dt Appris
    %dd.Appris.row
      %dl
        - entity.appris_residues.each do |type, list|
          %dt= Misc.humanize type
          %dd
            %li.clean_list
              - list.each do |range|
                %li
                  == (#{range['start']}..#{range['end']})
                  %a.appris_highlight(href="#" attr-start="#{range['start']}" attr-end="#{range['end']}") Highlight

    %dt COSMIC mutations
    %dd.COSMIC.row
      = fragment do

        %ul.highlight
          %li
            %a.highlight(href="#") highlight
          %li
            %select(name='color')
              - %w(red blue green).each do |c|
                %option(value=c)= c


        - header "Genomic Mutation", "GenomicMutation", {:organism => "Hsa/jun2011", :watson => true}
        - filter "Primary site"
        = table :id => "COSMIC mutations for #{ entity }" do

          - tsv = TSV.setup(entity.gene.COSMIC_rsids, :key_field => "Mutation ID", :fields => [], :type => :double)
          - tsv.attach CMD.cmd('grep -v "_ENST"', :in => COSMIC.mutations.open, :pipe => true), :fields => ["Genomic Mutation", "Primary site", "Site subtype", "Primary histology", "Histology subtype"]

          - mutations = GenomicMutation.setup(tsv.column("Genomic Mutation").values.flatten, "COSMIC mutations over #{entity.gene}", "Hsa/jun2011", true)
          - mutation_isoforms = Misc.process_to_hash(mutations){|list| list.mutated_isoforms}
          - tsv.add_field "Change" do |key, values|
            - mutation = values[0].first
            - mis = mutation_isoforms[mutation]
            - mi = mis.select_by(:protein){|p| p == entity}.select_by(:consequence){|c| c != "SYNONYMOUS"}.first unless mis.nil?
            - mi.nil? ? [""] : [mi.change]

          - tsv = tsv.reorder("Genomic Mutation", tsv.fields - ["Genomic Mutation"])
          - tsv.namespace = "Hsa/jun2011"
          - tsv.entity_options = {:watson => true}
          - tsv.select("Change"){|c| ! c.flatten.empty?}

        :javascript

 
          $('ul.highlight > li > a.highlight').click(function(){
            var table = $(this).parents('dd').first().find('table');
            var url = table.attr('attr-url');
            var filter = table.attr('attr-filter');

            url = add_parameter(url, '_format', 'json')
            url = add_parameter(url, '_page', 'all')
            url = add_parameter(url, '_column', 'Change')
            if (undefined != filter){ url = add_parameter(url, '_filter',  escape(filter)) }

            $.ajax({
              url: url,
              success: function(data){
                data = JSON.parse(data);
                var change_positions = [];
                for (mutation in data){
                  var changes = data[mutation];
                  for (i in changes){
                    var c = changes[i];
                    if (m = c.match(/(\d+)/)){
                      change_positions.push(parseInt(m[1]));
                    }
                  }
                }
                var isoform_svg= $('.isoform_svg_tool');
                var jmol = $('.jmol_tool');
                var color = table.parent('.row').find('select').val();

                if(jmol.jmol_tool('is_pdb_loaded')){ jmol.jmol_tool('mark_sequence_positions', change_positions, color); }
                isoform_svg.isoform_svg_tool('mark_position', change_positions, color);
              }
            })

            return false;
          })

     

  :javascript
    deffer(function(){
      require_js("/js/protein.js");

      $('.controls > ul.controls > li > a.clear').click(function(){
        var isoform_svg= $('.isoform_svg_tool');
        var jmol = $('.jmol_tool');

        if(jmol.jmol_tool('is_pdb_loaded')){ jmol.jmol_tool('clear'); }

        isoform_svg.isoform_svg_tool('clear');

        return false;
      })

      $('.controls > ul.controls > li > a.aligned').click(function(){
        var jmol = $('.jmol_tool');
        var isoform_svg= $('.isoform_svg_tool');

        if(jmol.jmol_tool('is_pdb_loaded')){ 
          var map = jmol.jmol_tool('alignment_map');
          jmol.jmol_tool('mark_aligned_region', 'blue');
          isoform_svg.isoform_svg_tool('mark_aligned_region', map, 'blue');
        }
        return false;
      })

      var form = $('.controls > .action_parameters > form');
      var submit = form.find('input[type=submit]');
      submit.click(function(){
        var list = form.find('select[name=list]').val();
        var color = form.find('select[name=color]').val();

        var jmol = $('.jmol_tool');
        if(jmol.jmol_tool('is_pdb_loaded')){ jmol.jmol_tool('mark_genomic_mutations', list, color); }

        var isoform_svg= $('.isoform_svg_tool');
        isoform_svg.isoform_svg_tool('mark_genomic_mutations', list, color);

        return false
      })

      $('a.appris_highlight').click(function(){
      console.log(1)
        var link = $(this)
        var color = 'red'
        var start = parseInt(link.attr('attr-start'));
        var end = parseInt(link.attr('attr-end'));

        var jmol = $('.jmol_tool');
        var isoform_svg= $('.isoform_svg_tool');

        if (start == end){
          if(jmol.jmol_tool('is_pdb_loaded')){ jmol.jmol_tool('mark_sequence_positions', [start], color) }
          isoform_svg.isoform_svg_tool('mark_position', start, color)
        }else{
          var positions = [start];
          var i=start;
          while(i<stop){i+=1;positions.push(i)}

          if(jmol.jmol_tool('is_pdb_loaded')){ jmol.jmol_tool('mark_sequence_positions', positions, color) }
          isoform_svg.isoform_svg_tool('mark_region', start, end, color)
        }
        return false
      })
    })

- entity_card.action_controller = default_action_controller entity


= entity_card_render entity_card
