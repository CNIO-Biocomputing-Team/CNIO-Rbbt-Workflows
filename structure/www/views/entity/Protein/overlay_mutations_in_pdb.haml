- action_card = ActionCard.new do
  - input :list, :select, "Genomic Mutation list", nil, :html_options => {:class => 'favourite_lists', :type => 'GenomicMutation'}
  - input :color, :select, "Color to use", 'green', :select_options => %w(red green blue)
  - input :organism, :string, "Organism Code", entity.organism, :hide => true

- action_card.require :list 
= action_card_render action_card do
 
  - seq_len = entity.sequence.length

  - mutations = Entity::List.load_list("GenomicMutation", list, user)

  - if mutations.organism == entity.organism
    - mutated_isoforms = mutations.mutated_isoforms.compact.flatten.select_by(:protein){|p| p == entity}
  - else
    - mutated_isoforms = mutations.mutated_isoforms.compact.flatten.select_by(:protein){|p| p == entity.ortholog(mutations.organism)}

  - mi_pdb_positions = {}
  - mutated_isoforms.each do |mi|
    - pdbs = mi.pdbs_and_positions
    - mi_pdb_positions[mi] = pdbs if pdbs and pdbs.any?
    

  :javascript
    deffer(function(){
      load_positions_in_pdb(jmol, #{mi_pdb_positions.to_json}, '#{color}');
    })
