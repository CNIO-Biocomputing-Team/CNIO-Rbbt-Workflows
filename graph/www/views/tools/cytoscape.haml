- id = (rand * 1000).to_i unless defined? id and not (id.nil? or id.empty?)
- id = Misc.snake_case(id)
- static = false unless defined? static and not static.nil?
- knowledge_base = nil unless defined? knowledge_base and not knowledge_base.nil?

= link_css '/stylesheets/cytoscape'

.cytoscape_tool(id=id)

  %dl.rbbt_menu
    - if not static

      %dt.next Edges
      %dd.content
        .database_edges
          %h5 Add edges between entities
          = action_parameters nil, {:klass => ''}, :action => '#' do
            - input :database, :multiple, "Association database", nil, :choices => cytoscape.knowledge_base.all_databases
          

      %dt.next Entities
      %dd.content
        .database_neighbours
          %h5 Add neighbours of entities
          = action_parameters nil, {:klass => ''}, :action => '#' do
            - input :database, :select, "Association database", nil, :select_options => cytoscape.knowledge_base.all_databases

        .add_gene_list
          %h5 Add entities from a list
          = action_parameters nil, {:klass => ''}, :action => '#' do
            - input :entities, :select, "Entities to add", nil, :html_options => {:class => 'favourite_lists', :type => 'All'}

    %dt.next Aesthetics
    %dd.content
      .select_gene_list
        %h5 Highlight entities from a list
        = action_parameters nil, {:klass => ''}, :action => '#' do
          - input :entities, :select, "Genes to add", nil, :html_options => {:class => 'favourite_lists', :type => 'All'}

      .maps
        %h5 Map entity aesthetic
        = action_parameters nil, {:klass => ''}, :action => '#' do
          - input :aesthetic, :select, "Aesthetic to map to", :opacity, :select_options => [:shape, :size, :color, :opacity, :borderWidth]
          - input :field, :string, "Attribute to map", 'id', :select_options => {:textarea => "Use textarea"}, :html_options => {:class => 'favourite_maps', :type => 'All'}
          - input :map, :select, "Select map to use", nil, :select_options => {:textarea => "Use textarea"}, :html_options => {:class => 'favourite_maps', :type => 'All'}
          - input :map_tsv, :text, "Map", nil, :nofile => true

  .window(id="#{id}_window")


  :javascript
    deffer(function(){
      require_js('/js/cytoscape', function(){
        var cytoscape_id = '##{id}';

        console.log("Loading cytoscape: " + cytoscape_id)
        var tool = $(cytoscape_id).cytoscape_tool({
          knowledge_base: 'genomics',
          namespace: '#{cytoscape.namespace}',
          entities: #{cytoscape.entities.to_json},
          network: #{cytoscape.network.to_json},

          node_click: function(event){
            var target = event.target;
            for (var i in target.data) {
              var variable_name = i;
              var variable_value = target.data[i];
            }
            var url = target.data.url;

            $('#modal').modal('show_url', url, undefined, function(){
              $('#modal').find(' > .header > .title').attr('entity', target.data.id).attr('type', target.data.entity_type)
            })
            return(false)
          },

          edge_click: function(event){
            var target = event.target;
            for (var i in target.data){
              var variable_name = i;
              var variable_value = target.data[i];
              console.log( "event.target.data." + variable_name + " = " + variable_value );
            }

            info = JSON.parse(target.data.info)

            var dl = $('<dl>')
            for (key in info){
              var value = info[key]
              dl.append($('<dt>').html(key))
              dl.append($('<dd>').html(value))
            }
            $('#modal').modal('show', dl)
 
            return(false)
          }

        });

        require_js('/js/controls/context_menu', function(){
          cytoscape_context_menu(tool)
        })

        require_js('/js/controls/placement', function(){
          cytoscape_placement(tool)
        })

        require_js('/js/controls/save', function(){
          cytoscape_save(tool)
        })


        ///////////////////////////////////
        //{{{ NETWORK INIT

        tool.cytoscape_tool('draw');

        //////////////////////////////////////////////////////////////////
        //{{{ Controls

        $('.cytoscape_tool .database_edges input[type=submit]').click(function(){
          var databases = $.map($(this).parents('form').first().find('.input.database.multiple').find('input[type=checkbox]:checked'), function(e){
            return $(e).attr('name').match(/\[(.*)\]/)[1];
          })

          tool.cytoscape_tool('set_edges', databases)
          tool.cytoscape_tool('draw');

          return false;
        })

        $('.cytoscape_tool .database_neighbours input[type=submit]').click(function(){
          var databases = $.map($(this).parents('form').first().find('.input.database').find('input[type=checkbox]:checked'), function(e){
            return $(e).attr('name').match(/\[(.*)\]/)[1];
          })
          var option = $(this).closest('form').find('select').find('option:selected');
          var database = option.html()

          tool.cytoscape_tool('add_neighbours', database)
          tool.cytoscape_tool('draw');

          return false;
        })


        $('.cytoscape_tool .add_gene_list input[type=submit]').click(function(){
          var option = $(this).closest('form').find('select.favourite_lists').find('option:selected');
          var type = option.attr('attr-entity_type')
          var list_id = $(this).parents('form').first().find('select').val();
          var list = list_entities(type, list_id);
          var info = list_info(type, list_id);

          tool.cytoscape_tool('add_entities', type, list)
          tool.cytoscape_tool('draw');

          return false;
        })

        $('.cytoscape_tool .select_gene_list input[type=submit]').click(function(){
          var option = $(this).closest('form').find('select.favourite_lists').find('option:selected');
          var type = option.attr('attr-entity_type')
          var list_id = $(this).parents('form').first().find('select').val();
          var list = list_entities(type, list_id);

          tool.cytoscape_tool('select_entities', list)

          return false;
        })

        $('.cytoscape_tool .maps input[type=submit]').click(function(){
          var form = $(this).closest('form')


          var map_id = form.first().find('div.input.map select').val();
          var field = form.first().find('div.input.field input').val();
          var map_content = form.first().find('div.input.map_tsv textarea').val();
          var option = form.first().find('div.input.map option:selected');
          var type = option.attr('attr-entity_type')
          var column = form.first().find('div.input.map select').find('option:selected').attr('attr-column');
          var aesthetic = form.first().find('div.input.aesthetic select').val();

          var map;

          if (map_id == 'textarea'){
            map_content = "#: :type=:single#:sep=/\\s/#:identifiers=Hsa/jan2013\n" + map_content
            rbbt_job('TSVWorkflow', 'to_json', {tsv: map_content}, function(data){
              var map = JSON.parse(data)
              tool.cytoscape_tool('aesthetic', 'nodes', aesthetic, map, field)
              tool.cytoscape_tool('draw')
            })
          }else{
            entity_map(type, column, map_id, function(map){
              tool.cytoscape_tool('aesthetic', 'nodes', aesthetic, map, field)
              tool.cytoscape_tool('draw')
            });
          }

          return false;
        })
      })
    })
