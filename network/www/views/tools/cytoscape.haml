- id = (rand * 1000).to_i unless defined? id and not (id.nil? or id.empty?)
- id = Misc.snake_case(id)
- static = false unless defined? static and not static.nil?
- knowledgebase = nil unless defined? knowledgebase and not knowledgebase.nil?

= link_css '/stylesheets/cytoscape'

.cytoscape_tool(id=id)

  %dl.tabs
    %dt Controls
    %dd.controls
      - if not static
        .database_edges
          %h5 Add edges between entities
          = action_parameters nil, {:klass => ''}, :action => '#' do
            - input :database, :multiple, "Association database", nil, :choices => graph.association_sources

        .add_gene_list
          %h5 Add entities from a list
          = action_parameters nil, {:klass => ''}, :action => '#' do
            - input :entities, :select, "Entities to add", nil, :html_options => {:class => 'favourite_lists', :type => 'All'}

      .select_gene_list
        %h5 Highlight entities from a list
        = action_parameters nil, {:klass => ''}, :action => '#' do
          - input :entities, :select, "Genes to add", nil, :html_options => {:class => 'favourite_lists', :type => 'All'}


      .maps
        %h5 Map aesthetic
        = action_parameters nil, {:klass => ''}, :action => '#' do
          - input :map, :select, "Select map to use", nil, :html_options => {:class => 'favourite_maps', :type => 'All'}
          - input :aesthetic, :select, "Aesthetic to map to", :opacity, :select_options => [:opacity, :borderWidth]

    %dt Cytoscape
    %dd
      .window(id="#{id}_window")
      .inspector


  - entity_options = graph.entity_options
  :javascript
    deffer(function(){
      require_js('/js/cytoscape', function(){
        var cytoscape_id = '##{id}';

        var tool = $(cytoscape_id).cytoscape_tool({
          network: #{graph.network.to_json},
          knowledgebase: '#{knowledgebase}',
          entity_options: #{entity_options.to_json},

          node_click: function(event){
            var target = event.target;
            for (var i in target.data) {
              var variable_name = i;
              var variable_value = target.data[i];
              console.log( "event.target.data." + variable_name + " = " + variable_value );
            }
            var url = target.data.url;

            open_url_in_reveal('modal1', url, function(){
              $('#modal1').find(' > .header > .title').attr('entity', target.data.id).attr('type', target.data.entity_type)
            })
            return(false)
          },

          edge_click: function(event){
            var target = event.target;
            for (var i in target.data) {
              var variable_name = i;
              var variable_value = target.data[i];
              console.log( "event.target.data." + variable_name + " = " + variable_value );
            }

            info = JSON.parse(target.data.info)

            var dl = $('<dl>')
            for (key in info){
              var value = info[key]
              dl.append($('<dt>').html(key))
              dl.append($('<dd>').html(value))
            }

            show_reveal('modal1', dl)
            $('#modal1').foundation('reveal', 'open')
 
            return(false)
          }

        });

        ///////////////////////////////////
        //{{{ CONTEXT MENU

        tool.cytoscape_tool('add_context_menu_item', "Remove selected", "none", function (evt) {
          var vis = tool.cytoscape_tool('vis');
          var removed_nodes = vis.selected('nodes')
          $.map(removed_nodes, function(node){
            tool.cytoscape_tool('remove_entities', node.data.entity_type, [node.data.id])
          })
          tool.cytoscape_tool('draw');
        });

        tool.cytoscape_tool('add_context_menu_item', "Remove", "nodes", function (evt) {
          var vis = tool.cytoscape_tool('vis');
          var node = evt.target;
          tool.cytoscape_tool('remove_entities', node.data.entity_type, [node.data.id])
          tool.cytoscape_tool('draw');
        });

        tool.cytoscape_tool('add_context_menu_item', "Select first neighbors", "nodes", function (evt) {
          var vis = tool.cytoscape_tool('vis');
          var rootNode = evt.target;
          var fNeighbors = vis.firstNeighbors([rootNode]);
          var neighborNodes = fNeighbors.neighbors;
          vis.select([rootNode]).select(neighborNodes);
        });


        //{{{ PLACEMENT

        tool.cytoscape_tool('add_context_menu_item', "Pull first neighbors", "nodes", function (evt) {
          var vis = tool.cytoscape_tool('vis');
          var rootNode = evt.target;
          var all_nodes = vis.nodes();
          var fNeighbors = vis.firstNeighbors([rootNode]);
          var neighborNodes = fNeighbors.neighbors;
          var zoom = vis.zoom();
          var root_x = rootNode.x / zoom
          var root_y = rootNode.y / zoom
          var dist = 100
          var points = []
          var neighborNode_ids = $.map(neighborNodes, function(node){return(node.data.id)})
          $.each(all_nodes, function(){
            var node = this
            if ($.inArray(node.data.id, neighborNode_ids) >= 0){
              var node_x = node.x / zoom
              var node_y = node.y / zoom
              var dist_x = node_x - root_x
              var dist_y = node_y - root_y
              var length = Math.sqrt(Math.pow(dist_x,2) + Math.pow(dist_y, 2))
              node_x = root_x + (dist_x / length * ((dist + Math.random() * dist)))
              node_y = root_y + (dist_y / length * ((dist + Math.random() * dist)))
              node.x = node_x * zoom
              node.y = node_y * zoom
            }
            points.push({id:node.data.id, x: node.x / zoom, y: node.y / zoom})
          })
          tool.cytoscape_tool('set_positions', points)
          tool.cytoscape_tool('draw')
        });

        tool.cytoscape_tool('add_context_menu_item', "Surround with first neighbors", "nodes", function (evt) {
          var vis = tool.cytoscape_tool('vis');
          var rootNode = evt.target;
          var all_nodes = vis.nodes();
          var fNeighbors = vis.firstNeighbors([rootNode]);
          var neighborNodes = fNeighbors.neighbors;
          var zoom = vis.zoom();
          var root_x = rootNode.x / zoom
          var root_y = rootNode.y / zoom
          var dist = 20
          var points = []
          var neighborNode_ids = $.map(neighborNodes, function(node){return(node.data.id)})
          var ang = 0
          var num = 0
          var circum = 0

          $.each(all_nodes, function(){
            var node = this
            if ($.inArray(node.data.id, neighborNode_ids) >= 0){
              num += 1;
              if (undefined !== node.data.size){
                circum += tool.cytoscape_tool('get_options').visualStyle.nodes.size.defaultValue + 5
              }else{
                circum += parseInt(node.data.size) + 5
              }
            }
          })

          dist += circum / (2 * Math.PI)

          if (dist < 50){ dist = 50}

          var ang_inc = 1.0 / num
          $.each(all_nodes, function(){
            var node = this
            if ($.inArray(node.data.id, neighborNode_ids) >= 0){
              ang = ang + ang_inc
              var node_x = root_x + (dist * Math.sin(ang * 2 * Math.PI))
              var node_y = root_y + (dist * Math.cos(ang * 2 * Math.PI))
              node.x = node_x * zoom
              node.y = node_y * zoom
            }
            points.push({id:node.data.id, x: node.x / zoom, y: node.y / zoom})
          })
          tool.cytoscape_tool('set_positions', points)
          tool.cytoscape_tool('draw')
        });



        tool.cytoscape_tool('add_context_menu_item', "Horizontally place selected", "none", function (evt) {
          var vis = tool.cytoscape_tool('vis');
          var all_nodes = vis.nodes();
          var selected = vis.selected('nodes')
          var zoom = vis.zoom();
          var root_x = evt.mouseX / zoom
          var root_y = evt.mouseY / zoom
          var dist = 20
          var points = []
          var selected_ids = $.map(selected, function(node){return(node.data.id)})
          var ang = 0
          var num = 0
          var l = 0
          $.each(all_nodes, function(){
            var node = this
            if ($.inArray(node.data.id, selected_ids) >= 0){
              num += 1;
              if (undefined !== node.data.size){
                l += tool.cytoscape_tool('get_options').visualStyle.nodes.size.defaultValue * 2
              }else{
                l += parseInt(node.data.size)  * 2
              }
            }
          })

          var pos = root_x - l / 2
          var pos_inc = l / num

          $.each(all_nodes, function(){
            var node = this
            if ($.inArray(node.data.id, selected_ids) >= 0){
              pos += pos_inc
              var node_x = root_x + pos 
              var node_y = root_y
              node.x = node_x * zoom
              node.y = node_y * zoom
            }
            points.push({id:node.data.id, x: node.x / zoom, y: node.y / zoom})
          })
          tool.cytoscape_tool('set_positions', points)
          tool.cytoscape_tool('draw')
        });


 
        tool.cytoscape_tool('add_context_menu_item', "Vertically place selected", "none", function (evt) {
          var vis = tool.cytoscape_tool('vis');
          var all_nodes = vis.nodes();
          var selected = vis.selected('nodes')
          var zoom = vis.zoom();
          var root_x = evt.mouseX / zoom
          var root_y = evt.mouseY / zoom
          var dist = 20
          var points = []
          var selected_ids = $.map(selected, function(node){return(node.data.id)})
          var ang = 0
          var num = 0
          var l = 0
          $.each(all_nodes, function(){
            var node = this
            if ($.inArray(node.data.id, selected_ids) >= 0){
              num += 1;
              if (undefined !== node.data.size){
                l += tool.cytoscape_tool('get_options').visualStyle.nodes.size.defaultValue * 2
              }else{
                l += parseInt(node.data.size)  * 2
              }
            }
          })

          var pos = root_y - l / 2
          var pos_inc = l / num

          $.each(all_nodes, function(){
            var node = this
            if ($.inArray(node.data.id, selected_ids) >= 0){
              pos += pos_inc
              var node_x = root_x 
              var node_y = root_y + pos
              node.x = node_x * zoom
              node.y = node_y * zoom
            }
            points.push({id:node.data.id, x: node.x / zoom, y: node.y / zoom})
          })
          tool.cytoscape_tool('set_positions', points)
          tool.cytoscape_tool('draw')
        });


        ///////////////////////////////////
        //{{{ ENTITY INIT


        ///////////////////////////////////
        //{{{ NETWORK INIT

        #{graph.entities.keys.collect do |type|
          entity_options = graph.entity_options(type)
          "tool.cytoscape_tool('add_entities', '#{type}', #{graph.entities[type].to_json});"
          end * "\n" unless static
        }

        #{graph.databases.collect do |database|
          "tool.cytoscape_tool('add_edges', '#{database}');"
          end * "\n" unless static
        }
        #{graph.aesthetics.collect do |elem, aesthetics|
          aesthetics.collect do |aesthetic, info|
            "tool.cytoscape_tool('aesthetic', '#{ elem }', '#{ aesthetic }', #{info[:map].to_json}, '#{info[:feature]}');"
          end
        end.flatten * "\n"
        }

        tool.cytoscape_tool('draw');

        //////////////////////////////////////////////////////////////////
        //{{{ Controls

        $('dd.controls .database_edges input[type=submit]').click(function(){
          var databases = $.map($(this).parents('form').first().find('.input.database.multiple').find('input[type=checkbox]:checked'), function(e){
            return $(e).attr('name').match(/\[(.*)\]/)[1];
          })

          tool.cytoscape_tool('set_edges', databases)
          tool.cytoscape_tool('draw');

          return false;
        })

        $('dd.controls .add_gene_list input[type=submit]').click(function(){
          var option = $(this).closest('form').find('select.favourite_lists').find('option:selected');
          var type = option.attr('attr-entity_type')
          var list_id = $(this).parents('form').first().find('select').val();
          var list = list_entities(type, list_id);
          var info = list_info(type, list_id);

          var format = info.format
          if (undefined === format){
            format = type
          }

          tool.cytoscape_tool('add_entities', format, list)
          tool.cytoscape_tool('draw');

          return false;
        })

        $('dd.controls .select_gene_list input[type=submit]').click(function(){
          var option = $(this).closest('form').find('select.favourite_lists').find('option:selected');
          var type = option.attr('attr-entity_type')
          var list_id = $(this).parents('form').first().find('select').val();
          var list = list_entities(type, list_id);
          var info = list_info(type, list_id);

          var format = info.format
          if (undefined === format){
            format = type
          }

          tool.cytoscape_tool('select_entities', list)

          return false;
        })

        $('dd.controls .maps input[type=submit]').click(function(){
          var form = $(this).closest('form')

          var map_id = form.first().find('div.input.map select').val();
          var option = form.first().find('div.input.map option:selected');
          var type = option.attr('attr-entity_type')
          var column = form.first().find('div.input.map select').find('option:selected').attr('attr-column');
          var aesthetic = form.first().find('div.input.aesthetic select').val();

          var map = entity_map(type, column, map_id);

          tool.cytoscape_tool('add_map', aesthetic, map)

          return false;
        })
      })
    })
